
# 📚 Java Assertions and Unit Testing: A Complete Beginner’s Guide

---

## ✨ What Are Assertions in Java?

- Assertions **check if a condition is true** during program execution.
- Commonly used in **unit tests** to automatically verify expected behavior.
- If the assertion fails, the test fails, helping catch bugs early.

---

## 📌 Why Use Assertions?

- 🚀 Catch bugs **before production**.
- 📈 Ensure **code correctness** as you make changes.
- 🛠 Automate testing and save time.

---

## 🛠️ Setting Up Java Unit Testing with JUnit 5

### ✅ Add JUnit 5 to Your Project

#### Maven
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>5.9.3</version>
    <scope>test</scope>
</dependency>
```

#### Gradle
```gradle
testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
```

---

# 🎯 Writing Effective Unit Tests

## 🚦 Step 1: Understand What You’re Testing

- What method are you testing?
- What are its expected inputs and outputs?
- Are there any invalid inputs or boundary values?

## 📝 Step 2: Standard Test Cases

**These cover typical, correct inputs.**

```java
@Test
public void testAddPositiveNumbers() {
    Calculator calc = new Calculator();
    int result = calc.add(2, 3);
    assertEquals(5, result);
}
```

---

## 🛡️ Step 3: Defensive Tests (Invalid Inputs)

**Ensure your code handles bad data gracefully.**

```java
@Test
public void testAddNullInput() {
    Calculator calc = new Calculator();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        calc.add(null, 5);
    });
    assertEquals("Input cannot be null", exception.getMessage());
}
```

---

## 🧩 Step 4: Edge Case Tests

**Test the boundaries of valid input ranges.**

```java
@Test
public void testAddWithZero() {
    Calculator calc = new Calculator();
    int result = calc.add(0, 5);
    assertEquals(5, result);
}

@Test
public void testAddWithMaxInteger() {
    Calculator calc = new Calculator();
    int result = calc.add(Integer.MAX_VALUE, 0);
    assertEquals(Integer.MAX_VALUE, result);
}
```

---

# ✅ Best Practices for Writing Assertions

| Practice           | Good Example                  | Bad Example     |
|--------------------|-------------------------------|-----------------|
| Clear Test Names   | `testAddPositiveNumbers`       | `test1()`       |
| One Purpose/Test   | One `assertEquals` per test    | Multiple assertions |
| Use Descriptive Assertions | `assertEquals(5, result)` | `assertTrue(result == 5)` |
| Handle Exceptions  | `assertThrows(...)`            | No exception checks |

---

## 📚 Common Assertion Methods

| Assertion         | Purpose                         |
|-------------------|---------------------------------|
| `assertEquals`    | Verify values are equal         |
| `assertTrue`      | Verify a condition is true      |
| `assertFalse`     | Verify a condition is false     |
| `assertNull`      | Verify value is `null`          |
| `assertNotNull`   | Verify value is not `null`      |
| `assertThrows`    | Verify exception is thrown      |
| `assertArrayEquals` | Verify two arrays are equal   |

---

# 📖 Full Example: Name Formatter Test Suite

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NameFormatterTest {

    @Test
    public void testFormat_MinimalInfo() {
        String result = NameFormatter.format("John", "Doe");
        assertEquals("Doe, John", result);
    }

    @Test
    public void testFormat_FullDetail() {
        String result = NameFormatter.format("Dr", "John", "H.", "Doe", "PhD");
        assertEquals("Doe, Dr. John H., PhD", result);
    }

    @Test
    public void testFormat_NoMiddleName() {
        String result = NameFormatter.format("Ms", "Mary", "", "Smith", "MSc");
        assertEquals("Smith, Ms. Mary, MSc", result);
    }

    @Test
    public void testFormat_InvalidInput() {
        String result = NameFormatter.format("InvalidWithoutComma");
        assertEquals("invalid format: missing suffix", result);
    }

    @Test
    public void testFormat_EdgeCase_EmptyNames() {
        String result = NameFormatter.format("", "", "", "", "");
        assertEquals(", ", result);
    }
}
```

---

# 🌍 Additional Resources for Learning

- 📖 [JUnit 5 User Guide](https://junit.org/junit5/docs/current/user-guide/)
- 📖 [Effective Unit Testing (Book)](https://www.oreilly.com/library/view/effective-unit-testing/9780132764045/)
- 📖 [Clean Code by Robert C. Martin](https://www.oreilly.com/library/view/clean-code/9780136083234/)
- 💻 [Baeldung Java Unit Testing Tutorials](https://www.baeldung.com/)

---

# 📅 Final Checklist

- ✅ Standard test cases written.
- ✅ Defensive tests for invalid inputs.
- ✅ Edge cases checked (empty, max, min values).
- ✅ Clear test method names.
- ✅ All tests automated and repeatable.

---

_“Good tests not only check correctness but document how your code should behave.”_ 🚀
